#!/usr/bin/python

import boto.ec2, time, argparse, sys
from datetime import timedelta, datetime
from dateutil import parser

def get_options():
  parser = argparse.ArgumentParser(description='Snapshot management tool')
  parser.add_argument('-a','--account', metavar='account number', help='Account Numner', required=True)
  parser.add_argument('-r','--region', metavar='AWS Region', help='AWS Endpoint Default=eu-west-1', required=False)
  parser.add_argument('-s','--schedule', metavar='Monthly|Daily', help='Schedule for backups', required=True)
  parser.add_argument('-v','--validity', metavar='Days', help='Retention period for snapshots in days', required=True)
  args = vars(parser.parse_args())
  account = args['account']
  if not args['region']:
    region = 'eu-west-1'
  else:
    region = args['region'] 
  if args['schedule'] in 'Daily' or args['schedule'] in 'Monthly':
    schedule = args['schedule']
  else:
    print 'Error must contain value Daily or Monthly'
    sys.exit(0)
  try:
    int(args['validity'])
  except ValueError:
    print 'Value should be an integer'
    sys.exit(0)
  else:
    validity = args['validity']
  return (account, region, schedule, validity)

def ec2_connect (region):
  """
  Connects to EC2, returns a connection object
  """
  try:
    conn = boto.ec2.connect_to_region(region)
    if not conn:
        raise Exception("invalid EC2 region") 
  except Exception, e:
    sys.stderr.write ('Could not connect to region: %s. Exception: %s\n' % (region, e))
    conn = None
    
  return conn


def take_snap( schedule ):
  ts = time.time()
  daily_string = ("%s-Snapshot-%s" % (schedule, ts))
  
  volumes = conn.get_all_volumes()
  
  print daily_string
  
  for volume in volumes:
    print volume.id
    snapshot = conn.create_snapshot(volume.id, daily_string)

def manage_snaps( account, schedule, validity ):
  print schedule + "-Snapshot-*"
  validity = int(validity)
  filter_string = schedule + "-Snapshot-*"
  filters = {'description': filter_string}
  snaps = conn.get_all_snapshots(owner=account,filters=filters)
  
  for snap in snaps:
#    print snap.id
    limit = datetime.now() - timedelta(days=validity)
    if parser.parse(snap.start_time).date() <= limit.date():
        print conn.delete_snapshot(snap.id)




account, region, schedule, validity = get_options()

conn = ec2_connect (region)
if conn == None: 
  sys.exit(0)
else:
  take_snap(schedule)
  manage_snaps(account, schedule, validity)
